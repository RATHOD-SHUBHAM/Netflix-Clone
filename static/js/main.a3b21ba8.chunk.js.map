{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","style","padding","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3b21ba8.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// base url to make requests to the movie database\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n});\n\nexport default instance;\n\n// if we had to send /foo-bar then axios will append https://api.themoviedb.org/3 and will send https://api.themoviedb.org/3/foo-bar\n// instance.get('/foo-bar');\n// https://api.themoviedb.org/3/foo-bar","import React from 'react'\nimport {useState , useEffect} from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original\" ;\n\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const [movies, setMovies] = useState([]);\n\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n    // Need a snippet of code which runs based on a specific condition/variable.\n    useEffect(() => {\n        // if []. run once when the row loads, but dont run again and again.\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n\n            // https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\n            // console.log(request);\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n\n        }\n\n        fetchData();\n\n    }, [fetchUrl]);\n\n\n    // console.log(movies);\n    // console.table(movies);\n\n    // obtained from react-youtube documentation\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        // console.table(movie?.title)\n        // if already open and again we click on the movie. it should close the video\n        if (trailerUrl) {\n          setTrailerUrl('');\n        } \n        else {\n          movieTrailer(movie?.name || movie?.original_name || movie?.title || \"\")\n            .then(url => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n            //   https://www.youtube.com/watch?v=jamNVtr9CL0&list=RDjamNVtr9CL0&start_radio=1\n            // the video id is given to letter v by youtube\n              setTrailerUrl(urlParams.get('v'));\n            })\n            .catch(\n                (error) => console.log(error)\n                );\n        }\n    }\n\n\n    return (\n        <div className = \"row\">\n            {/* Title */}\n            <h2>{title}</h2>\n\n            <div className = \"row_posters\">\n\n                {movies.map(movie => (\n                    // poster_path = \"/gFZriCkpJYsApPZEF3jhxL4yLzG.jpg\"\n                    <img\n                     key = {movie.id}\n                     // onclick for each movie for youtube trailer\n                     onClick={() => handleClick(movie)}\n                     className = {`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                    //  src = {`${base_url}${movie.poster_path}`} alt={movie.name}\n                    // since we are using isLargeRow in app.js to show netflix original look bigger\n                    // we will not use poster path instead we will use backdrop_path\n                     src = {`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n                ))}\n\n\n            </div>\n\n            {/* container -> Posters */}\n            {/* This will pass show video under every row */}\n            {/* <YouTube videoId = '2g811Eo7K8U' opts={opts}/> */}\n\n            {/*  when we have a trailer URL show the youtube video */}\n            <div style={{ padding: \"40px\" }}>\n                {trailerUrl && <YouTube videoId = {trailerUrl} opts={opts}/>}\n            </div>\n                \n\n        </div>\n    )\n}\n\nexport default Row\n","// Add API Key\nconst API_KEY = \"2cdd14aa34025d121a00848c1ea69cfa\";\n\nconst requests = {\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n};\n\nexport default requests;","import React, {useState, useEffect} from 'react'\nimport axios from './axios'\nimport requests from './requests';\nimport './Banner.css'\n\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]); // responsible for what ever movie gets selected\n\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            //https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_network=123\n            // randomly select one movie\n            // Math.floor(Math.random() * request.data.results.length - 1)\n            setMovie(request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n            ]);\n            return request;\n        }\n\n        fetchData();\n\n    }, [])\n\n\n    // console.log(movie);\n\n    // Add the 3 button when there is lot of text.\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n      }\n\n    return (\n        // This header will have abackground image\n        <header className = \"banner\"\n\n            style={{\n                backgroundSize: \"cover\", // use all the size of screen\n                backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`, // ?. is saying if there is no movie at times it wont crash\n                backgroundPosition: \"center center\" // keep the image at center\n            }} \n        > \n            <div className = \"banner_contents\">\n\n                {/* title */}\n                <h1 className=\"banner_title\" >\n                    {/* the api might return title or name or original name */}\n                    { movie?.title || movie?.name || movie?.original_name }\n\n                </h1>\n\n                {/* div > 2 buttons > play and my list */}\n                <div className = \"banner_buttons\">\n\n                    <button className = \"banner_button\">Play</button>\n                    <button className = \"banner_button\">My List</button>\n \n                </div>\n\n                {/* description */}\n                <h1 className = \"banner_description\">{truncate(movie?.overview, 150)}</h1>\n                \n            </div>\n\n            {/* add empty div so as to give dimming effect while scrolling through the page  */}\n            <div className = \"banner--fadeBottom\"></div>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, {useState, useEffect} from 'react'\nimport \"./Nav.css\"\n\nfunction Nav() {\n\n    const [show, handleshow] = useState(false)\n    \n    // add event listner scroll. when we scroll more than 20 px down . activate listner else dont\n    // remove the existing listner before revoking an a new one\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n\n            if ( window.scrollY > 100 ) {\n                handleshow(true);\n            }\n            else handleshow(false);\n        }\n        );\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n\n\n    return (\n        // always have nav property and if show is true then add the have property of nav_black\n        <div className ={`nav ${show && \"nav_black\"}`}>\n            <img\n                className=\"nav_logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\n                alt=\"Netflix Logo\"\n            />\n            <img\n                className=\"nav_avatar\"\n                // src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n                src = \"https://i.pinimg.com/originals/e3/94/30/e39430434d2b8207188f880ac66c6411.png\"\n                alt=\"Netflix avatar\"\n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav Bar */}\n      <Nav/>\n      {/* app banner */}\n      <Banner />\n\n      {/* List Row */}\n      {/* isLargeRow is by default true and it will make this particular row larger than other */}\n      <Row title = \"Netflix Originals\" fetchUrl = {requests.fetchNetflixOriginals} isLargeRow/> \n      <Row title = \"Trending\" fetchUrl = {requests.fetchTrending}/>\n      <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated}/>\n      <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies}/>\n      <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies} />\n      <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies} />\n      <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies} />\n      <Row title = \"Documentaries\" fetchUrl = {requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}